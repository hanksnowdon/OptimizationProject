zip_dff <- TukeyHSD(mod_zip)
largezips <- zip_dff$`as.factor(zip)`[,4]>.99999
similarzips <- setDT(as.data.table(rownames(zip_dff$`as.factor(zip)`[largezips,][,0])))
similarzips <- similarzips %>% mutate(zip1 = str_remove(V1,"^[0-9]{5}-"),zip2 = str_remove(V1,"-[0-9]{5}$")) %>% select(-V1)
edges <- unique(similarzips[, .(from = zip1, to = zip2)]) # Create an edge list from zip1 and zip2 columns
graph <- graph_from_data_frame(edges, directed = FALSE) # Create a graph from the edge list
components <- clusters(graph)$membership # Find connected components (groups of connected vertices)
grouped_zips <- data.table(zip = as.numeric(V(graph)$name), groupzip = components) # Create a data table with the groups of zip codes
grouped_zips
df <- merge(df, grouped_zips, by.x = "zip", by.y = "zip", all.x = T)
df <- df %>% mutate(groupzip = ifelse(is.na(groupzip), paste0("group",zip),paste0("group",groupzip)))
mean_prices <- df %>%
group_by(zip) %>%
summarize(mean_price = mean(price, na.rm = TRUE)) %>%
arrange(-mean_price)  # Arrange by mean price
df$zip <- factor(df$zip, levels = mean_prices$zip) # Reorder zip factor levels based on mean prices
ggplot(df, aes(x = as.factor(zip), y = price, fill = groupzip)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
neighborhood_means <- df %>%
group_by(neighborhood) %>%
summarize(mean_price = mean(price))
neighborhood_means <- neighborhood_means %>%
mutate(numnbhdgroup = cut(mean_price, breaks = 6, labels = FALSE))
df <- left_join(df, neighborhood_means, by = "neighborhood")
df$numnbhdgroup <- as.factor(df$numnbhdgroup)
ggplot(df, aes(x = as.factor(neighborhood), y = price, fill = numnbhdgroup)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% group_by(Q) %>% count()
price_summary <- df  %>% group_by(paste0(year(date)," Q", quarter(date) )) %>% summarise(mean_price = mean(price))
# Mean price by quarter
plot1 <- ggplot(price_summary,
aes(x = `paste0(year(date), " Q", quarter(date))`, y = mean_price , group = 1)) +
geom_line(color = "blue") +
geom_point(color = "blue", size = 2) +
labs(x = "Quarter", y = "Mean Price ($)")  + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate x-axis labels
axis.text = element_text(size = 12),  # Increase axis labels size
axis.title = element_text(size = 14),
plot.title = element_text(size = 16)) +
scale_y_continuous(labels = comma)   + # Format y-axis labels in millions
geom_text(data = price_summary %>% filter(`paste0(year(date), " Q", quarter(date))` %in% c("2020 Q3", "2020 Q4")),
aes(label = paste0("$",scales::comma(mean_price)), x = `paste0(year(date), " Q", quarter(date))`, y = mean_price),
vjust = .5, hjust = 1.15, color = "blue", size = 5)  # Add callout labels
ggsave("/Users/hank/Documents/UChicago/Statistical Analysis/MeanPriceByQuarter.jpg", plot = plot1, width = 8, height = 3)
##################################################
# MODELING
##################################################
# Model testing
mod1 <- lm(I((price)) ~  groupzip + numnbhdgroup+ grosssqft*landsqft + bldclasssale  +Q , data = df)
summary(mod1)
RSS <- c(crossprod(mod1$residuals))
MSE <- RSS / length(mod1$residuals)
RMSE <- sqrt(MSE)
RMSE
plot(mod1$fitted.values,mod1$residuals)
bptest(mod1)
dwtest(mod1)
summary(mod1)
hist(mod1$residuals)
ks.test(mod1$residuals/summary(mod1)$sigma,pnorm)
# Model testing
mod1 <- lm(I((price)) ~  groupzip + numnbhdgroup+ grosssqft*landsqft + bldclasssale  +Q , data = df)
summary(mod1)
##################################################
# Data Upload and Cleaning
##################################################
#library(tidyverse)
#library(data.table)
#library(lubridate)
#library(corrplot)
#library(MASS)
#library(leaps)
# library(igraph)
# library(scales)
# library(lmtest)
years <- seq(2016,2020) # Set years to read data
for (yr in years){
# Account for differences in csv formatting
if (yr < 2020) {n <- 5}
else {n <- 8}
# Read csv
x <- read_csv(paste0("/Users/hank/Downloads/",yr,"_brooklyn.csv")
, skip = n
, col_names = c('borough','neighborhood','bldclasscat','taxclasscurr','block','lot','easement','bldclasscurr','address','aptnum','zip','resunits','comunits','totunits','landsqft','grosssqft','yrbuilt','taxclasssale','bldclasssale','price','date') # Set consistent names
, col_types = 'dcccddccccdcccccddccc'  # Force column types to be handled later
)
x <- x %>% filter(!rowSums(is.na(.)) == ncol(.)) # Remove rows where every value is NA
x <- x %>% mutate(year = yr) # Preserve year data
assign(paste0("df",yr), x) # Create data frames
}
## Combine data into one df
df <- setDT(bind_rows(df2016, df2017, df2018, df2019, df2020))
str(df)  # See data types
## Fix bldclasscat
df %>% group_by(bldclasscat) %>% count() %>% print(n = 100) # See double spaces causing duplicates
df <- df %>% mutate(bldclasscat = str_replace(bldclasscat, "  ", " "))
df %>% group_by(bldclasscat) %>% count() %>% print(n = 100) # Fixed
## Fix resunits, comunits, totunits, landsqft, grosssqft
# These columns contain "-" for NA in some years and have commas in the thousand's place
cols <- c('resunits', 'comunits', 'totunits', 'landsqft', 'grosssqft' )
unique(unlist(str_extract_all(df$price, "[^0-9.-]"))) #Find non-numeric characters
df <- df %>%
mutate_at(cols, ~ as.numeric(ifelse(. == "-", NA, str_remove_all(., ",")))) # Fix NA, remove commas, and convert to numeric
## Change 0's in yrbuilt to NA
df <- df %>% mutate(yrbuilt = ifelse(yrbuilt == 0,NA,yrbuilt))
## Fix prices
unique(unlist(str_extract_all(df$price, "[^[:digit:].]"))) # See non-numeric characters
df <- df %>% mutate(price = as.numeric(ifelse(price == "-", NA, str_remove_all(str_remove_all(price, ","), "\\$"))))
## Fix dates
df <- df %>% mutate(date = parse_date_time(df$date, orders = c("mdy")))
# Restrict to purchases of single-family residences and single-unit apartments or condos
df <- df %>%
filter(str_detect(bldclasssale, "^(A|R)")) %>%
filter(totunits == 1 & resunits == 1) %>%
filter(grosssqft > 0 & !is.na(grosssqft) ) %>%
filter(!is.na(price)  )
# Fixing Neighborhood variable
df <- df%>% mutate(neighborhood = str_remove_all(neighborhood, "( |-)"))
##################################################
# EDA
##################################################
# Plot by house type
ggplot(df, aes(x = as.factor(bldclasssale))) +
geom_bar(stat = "count" ) +
labs(x = "bldclasssale", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% group_by(bldclasssale) %>% count()
# Exclude CAPE COD, SUMMER COTTAGE, MANSION TYPE OR TOWN HOUSE, CONDOMINIUM RENTALS
# They have few enough observations and are not really normal homes
df <- df %>% filter(!(bldclasssale %in% c('A0', 'A6','A7','RR')))
ggplot(df, aes(x = as.factor(bldclasssale), y = price)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "bldclasssale", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
hist(df$price)
df %>% group_by(price) %>% count() %>% print(n = 30) # See small values
hist(df$price[df$price <6000000 & df$price >100], breaks = 100)
hist(df$price[df$price <50000 & df$price >100], breaks = 100) # Seems like outlier sales are < $10,000
nrow(df %>% filter(price < 10000))
nrow(df %>% filter(price > 6000000))
df <- df %>% filter(price > 10000)
df <- df %>% filter(price < 6000000)
# Create correlation plot
corrplot(cor(df %>% select(year, landsqft, grosssqft, yrbuilt, comunits, price) ,
use = "pairwise.complete.obs"),
method = "color", type = "upper", order = "hclust")
# Takeaways -> grosssqft is very correlated with price, landsqft less so
#           -> year slightly positive with price
# Creating a plot showing mean values of price for each zip code
ggplot(df, aes(x = as.factor(zip), y = price)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue", color = "black") +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Create house indicator
df <- df %>% mutate(house = str_detect(bldclasssale,"^A"))
## Creating other indicators
#columns_to_encode <- c(
#  #"zip",
#  #"neighborhood",
#  "year", "bldclasssale", "taxclasssale")
#for (col in columns_to_encode) {
#  df[[col]] <- as.factor(df[[col]])
#  indicators_col <- model.matrix(~ . - 1, data = df[, ..col])
#  colnames(indicators_col) <- gsub(col, "", colnames(indicators_col))
#  df <- cbind(df, indicators_col)
#}
# Feature Engineering Land Use Variable
df <- df %>% mutate(landuse = ifelse(landsqft == 0 , 0, grosssqft/landsqft))
# Q3 and Q4 2020 variables
df <- df %>% mutate(Q = as.factor(ifelse((year(date) == 2020 & quarter(date) == 3), "Q32020", ifelse((year(date) == 2020 & quarter(date) == 4), "Q42020", "QOther")))) %>%
mutate(year = as.factor(year(date)), quarter = as.factor(quarter(date)))
df$year <- relevel(df$year, ref = "2020")
df$quarter <- relevel(df$quarter, ref = "3")
# Create the interaction term with the modified levels
df$qyear <- interaction(df$year, df$quarter)
# Similar zips with Tukeys
mod_zip <- aov(price ~ as.factor(zip), data = df)
zip_dff <- TukeyHSD(mod_zip)
largezips <- zip_dff$`as.factor(zip)`[,4]>.99999
similarzips <- setDT(as.data.table(rownames(zip_dff$`as.factor(zip)`[largezips,][,0])))
similarzips <- similarzips %>% mutate(zip1 = str_remove(V1,"^[0-9]{5}-"),zip2 = str_remove(V1,"-[0-9]{5}$")) %>% select(-V1)
edges <- unique(similarzips[, .(from = zip1, to = zip2)]) # Create an edge list from zip1 and zip2 columns
graph <- graph_from_data_frame(edges, directed = FALSE) # Create a graph from the edge list
components <- clusters(graph)$membership # Find connected components (groups of connected vertices)
grouped_zips <- data.table(zip = as.numeric(V(graph)$name), groupzip = components) # Create a data table with the groups of zip codes
grouped_zips
df <- merge(df, grouped_zips, by.x = "zip", by.y = "zip", all.x = T)
df <- df %>% mutate(groupzip = ifelse(is.na(groupzip), paste0("group",zip),paste0("group",groupzip)))
mean_prices <- df %>%
group_by(zip) %>%
summarize(mean_price = mean(price, na.rm = TRUE)) %>%
arrange(-mean_price)  # Arrange by mean price
df$zip <- factor(df$zip, levels = mean_prices$zip) # Reorder zip factor levels based on mean prices
ggplot(df, aes(x = as.factor(zip), y = price, fill = groupzip)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
neighborhood_means <- df %>%
group_by(neighborhood) %>%
summarize(mean_price = mean(price))
neighborhood_means <- neighborhood_means %>%
mutate(numnbhdgroup = cut(mean_price, breaks = 6, labels = FALSE))
df <- left_join(df, neighborhood_means, by = "neighborhood")
df$numnbhdgroup <- as.factor(df$numnbhdgroup)
ggplot(df, aes(x = as.factor(neighborhood), y = price, fill = numnbhdgroup)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% group_by(Q) %>% count()
price_summary <- df  %>% group_by(paste0(year(date)," Q", quarter(date) )) %>% summarise(mean_price = mean(price))
# Mean price by quarter
plot1 <- ggplot(price_summary,
aes(x = `paste0(year(date), " Q", quarter(date))`, y = mean_price , group = 1)) +
geom_line(color = "blue") +
geom_point(color = "blue", size = 2) +
labs(x = "Quarter", y = "Mean Price ($)")  + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate x-axis labels
axis.text = element_text(size = 12),  # Increase axis labels size
axis.title = element_text(size = 14),
plot.title = element_text(size = 16)) +
scale_y_continuous(labels = comma)   + # Format y-axis labels in millions
geom_text(data = price_summary %>% filter(`paste0(year(date), " Q", quarter(date))` %in% c("2020 Q3", "2020 Q4")),
aes(label = paste0("$",scales::comma(mean_price)), x = `paste0(year(date), " Q", quarter(date))`, y = mean_price),
vjust = .5, hjust = 1.15, color = "blue", size = 5)  # Add callout labels
ggsave("/Users/hank/Documents/UChicago/Statistical Analysis/MeanPriceByQuarter.jpg", plot = plot1, width = 8, height = 3)
##################################################
# MODELING
##################################################
# Model testing
mod1 <- lm(I((price)) ~  groupzip + numnbhdgroup+ grosssqft*landsqft + bldclasssale  +Q , data = df)
summary(mod1)
RSS <- c(crossprod(mod1$residuals))
MSE <- RSS / length(mod1$residuals)
RMSE <- sqrt(MSE)
RMSE
plot(mod1$fitted.values,mod1$residuals)
bptest(mod1)
dwtest(mod1)
summary(mod1)
hist(mod1$residuals)
ks.test(mod1$residuals/summary(mod1)$sigma,pnorm)
saveRDS(list(model=mod1, data=df), file='hanksnowdon.RDS')
summary(mod1)
ggplot(df, aes(x = as.factor(neighborhood), y = price, fill = numnbhdgroup)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
##################################################
# Data Upload and Cleaning
##################################################
#library(tidyverse)
#library(data.table)
#library(lubridate)
#library(corrplot)
#library(MASS)
#library(leaps)
# library(igraph)
# library(scales)
# library(lmtest)
years <- seq(2016,2020) # Set years to read data
for (yr in years){
# Account for differences in csv formatting
if (yr < 2020) {n <- 5}
else {n <- 8}
# Read csv
x <- read_csv(paste0("/Users/hank/Downloads/",yr,"_brooklyn.csv")
, skip = n
, col_names = c('borough','neighborhood','bldclasscat','taxclasscurr','block','lot','easement','bldclasscurr','address','aptnum','zip','resunits','comunits','totunits','landsqft','grosssqft','yrbuilt','taxclasssale','bldclasssale','price','date') # Set consistent names
, col_types = 'dcccddccccdcccccddccc'  # Force column types to be handled later
)
x <- x %>% filter(!rowSums(is.na(.)) == ncol(.)) # Remove rows where every value is NA
x <- x %>% mutate(year = yr) # Preserve year data
assign(paste0("df",yr), x) # Create data frames
}
## Combine data into one df
df <- setDT(bind_rows(df2016, df2017, df2018, df2019, df2020))
str(df)  # See data types
## Fix bldclasscat
df %>% group_by(bldclasscat) %>% count() %>% print(n = 100) # See double spaces causing duplicates
df <- df %>% mutate(bldclasscat = str_replace(bldclasscat, "  ", " "))
df %>% group_by(bldclasscat) %>% count() %>% print(n = 100) # Fixed
## Fix resunits, comunits, totunits, landsqft, grosssqft
# These columns contain "-" for NA in some years and have commas in the thousand's place
cols <- c('resunits', 'comunits', 'totunits', 'landsqft', 'grosssqft' )
unique(unlist(str_extract_all(df$price, "[^0-9.-]"))) #Find non-numeric characters
df <- df %>%
mutate_at(cols, ~ as.numeric(ifelse(. == "-", NA, str_remove_all(., ",")))) # Fix NA, remove commas, and convert to numeric
## Change 0's in yrbuilt to NA
df <- df %>% mutate(yrbuilt = ifelse(yrbuilt == 0,NA,yrbuilt))
## Fix prices
unique(unlist(str_extract_all(df$price, "[^[:digit:].]"))) # See non-numeric characters
df <- df %>% mutate(price = as.numeric(ifelse(price == "-", NA, str_remove_all(str_remove_all(price, ","), "\\$"))))
## Fix dates
df <- df %>% mutate(date = parse_date_time(df$date, orders = c("mdy")))
# Restrict to purchases of single-family residences and single-unit apartments or condos
df <- df %>%
filter(str_detect(bldclasssale, "^(A|R)")) %>%
filter(totunits == 1 & resunits == 1) %>%
filter(grosssqft > 0 & !is.na(grosssqft) ) %>%
filter(!is.na(price)  )
# Fixing Neighborhood variable
df <- df%>% mutate(neighborhood = str_remove_all(neighborhood, "( |-)"))
##################################################
# EDA
##################################################
# Plot by house type
ggplot(df, aes(x = as.factor(bldclasssale))) +
geom_bar(stat = "count" ) +
labs(x = "bldclasssale", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df %>% group_by(bldclasssale) %>% count()
# Exclude CAPE COD, SUMMER COTTAGE, MANSION TYPE OR TOWN HOUSE, CONDOMINIUM RENTALS
# They have few enough observations and are not really normal homes
df <- df %>% filter(!(bldclasssale %in% c('A0', 'A6','A7','RR')))
ggplot(df, aes(x = as.factor(bldclasssale), y = price)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "bldclasssale", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
hist(df$price)
df %>% group_by(price) %>% count() %>% print(n = 30) # See small values
hist(df$price[df$price <6000000 & df$price >100], breaks = 100)
hist(df$price[df$price <50000 & df$price >100], breaks = 100) # Seems like outlier sales are < $10,000
nrow(df %>% filter(price < 10000))
nrow(df %>% filter(price > 6000000))
df <- df %>% filter(price > 10000)
df <- df %>% filter(price < 6000000)
# Create correlation plot
corrplot(cor(df %>% select(year, landsqft, grosssqft, yrbuilt, comunits, price) ,
use = "pairwise.complete.obs"),
method = "color", type = "upper", order = "hclust")
# Takeaways -> grosssqft is very correlated with price, landsqft less so
#           -> year slightly positive with price
# Creating a plot showing mean values of price for each zip code
ggplot(df, aes(x = as.factor(zip), y = price)) +
geom_bar(stat = "summary", fun = "mean", fill = "skyblue", color = "black") +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
## Creating other indicators
#columns_to_encode <- c(
#  #"zip",
#  #"neighborhood",
#  "year", "bldclasssale", "taxclasssale")
#for (col in columns_to_encode) {
#  df[[col]] <- as.factor(df[[col]])
#  indicators_col <- model.matrix(~ . - 1, data = df[, ..col])
#  colnames(indicators_col) <- gsub(col, "", colnames(indicators_col))
#  df <- cbind(df, indicators_col)
#}
# Q3 and Q4 2020 variables
df <- df %>% mutate(Q = as.factor(ifelse((year(date) == 2020 & quarter(date) == 3), "Q32020", ifelse((year(date) == 2020 & quarter(date) == 4), "Q42020", "QOther")))) %>%
mutate(year = as.factor(year(date)), quarter = as.factor(quarter(date)))
df$year <- relevel(df$year, ref = "2020")
df$quarter <- relevel(df$quarter, ref = "3")
# Similar zips with Tukeys
mod_zip <- aov(price ~ as.factor(zip), data = df)
zip_dff <- TukeyHSD(mod_zip)
largezips <- zip_dff$`as.factor(zip)`[,4]>.99999
similarzips <- setDT(as.data.table(rownames(zip_dff$`as.factor(zip)`[largezips,][,0])))
similarzips <- similarzips %>% mutate(zip1 = str_remove(V1,"^[0-9]{5}-"),zip2 = str_remove(V1,"-[0-9]{5}$")) %>% select(-V1)
edges <- unique(similarzips[, .(from = zip1, to = zip2)]) # Create an edge list from zip1 and zip2 columns
graph <- graph_from_data_frame(edges, directed = FALSE) # Create a graph from the edge list
components <- clusters(graph)$membership # Find connected components (groups of connected vertices)
grouped_zips <- data.table(zip = as.numeric(V(graph)$name), groupzip = components) # Create a data table with the groups of zip codes
grouped_zips
df <- merge(df, grouped_zips, by.x = "zip", by.y = "zip", all.x = T)
df <- df %>% mutate(groupzip = ifelse(is.na(groupzip), paste0("group",zip),paste0("group",groupzip)))
mean_prices <- df %>%
group_by(zip) %>%
summarize(mean_price = mean(price, na.rm = TRUE)) %>%
arrange(-mean_price)  # Arrange by mean price
df$zip <- factor(df$zip, levels = mean_prices$zip) # Reorder zip factor levels based on mean prices
ggplot(df, aes(x = as.factor(zip), y = price, fill = groupzip)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each zip code") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Neighborhood bins
neighborhood_means <- df %>%
group_by(neighborhood) %>%
summarize(mean_price = mean(price))
neighborhood_means <- neighborhood_means %>%
mutate(numnbhdgroup = cut(mean_price, breaks = 6, labels = FALSE))
df <- left_join(df, neighborhood_means, by = "neighborhood")
df$numnbhdgroup <- as.factor(df$numnbhdgroup)
ggplot(df, aes(x = as.factor(neighborhood), y = price, fill = numnbhdgroup)) +
geom_bar(stat = "summary", fun = "mean" ) +
labs(x = "ZIP", y = "Mean Value of Price") +
ggtitle("mean values of price for each neighborhood") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Count of timing discretization
df %>% group_by(Q) %>% count()
# Mean price by quarter
price_summary <- df  %>% group_by(paste0(year(date)," Q", quarter(date) )) %>% summarise(mean_price = mean(price))
plot1 <- ggplot(price_summary,
aes(x = `paste0(year(date), " Q", quarter(date))`, y = mean_price , group = 1)) +
geom_line(color = "blue") +
geom_point(color = "blue", size = 2) +
labs(x = "Quarter", y = "Mean Price ($)")  + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Rotate x-axis labels
axis.text = element_text(size = 12),  # Increase axis labels size
axis.title = element_text(size = 14),
plot.title = element_text(size = 16)) +
scale_y_continuous(labels = comma)   + # Format y-axis labels in millions
geom_text(data = price_summary %>% filter(`paste0(year(date), " Q", quarter(date))` %in% c("2020 Q3", "2020 Q4")),
aes(label = paste0("$",scales::comma(mean_price)), x = `paste0(year(date), " Q", quarter(date))`, y = mean_price),
vjust = .5, hjust = 1.15, color = "blue", size = 5)  # Add callout labels
ggsave("/Users/hank/Documents/UChicago/Statistical Analysis/MeanPriceByQuarter.jpg", plot = plot1, width = 8, height = 3)
##################################################
# MODELING
##################################################
# Model testing
mod1 <- lm(I((price)) ~  groupzip + numnbhdgroup+ grosssqft*landsqft + bldclasssale  +Q , data = df)
summary(mod1)
RSS <- c(crossprod(mod1$residuals))
MSE <- RSS / length(mod1$residuals)
RMSE <- sqrt(MSE)
RMSE
plot(mod1$fitted.values,mod1$residuals)
bptest(mod1)
dwtest(mod1)
summary(mod1)
hist(mod1$residuals)
ks.test(mod1$residuals/summary(mod1)$sigma,pnorm)
saveRDS(list(model=mod1, data=df), file='hanksnowdon.RDS')
wd()
pwd()
cd()
wd()
cwd()
getwd()
saveRDS(list(model=mod1, data=df), file='/Users/hank/Documents/UChicago/Statistical Analysis/hanksnowdon.RDS')
rm()
?read_rds()
read_rds(/Users/hank/Documents/UChicago/Statistical Analysis/hanksnowdon.RDS')
read_rds('/Users/hank/Documents/UChicago/Statistical Analysis/hanksnowdon.RDS')
7.046e+04
a <- read_rds('/Users/hank/Documents/UChicago/Statistical Analysis/hanksnowdon.RDS')
a[1]
summary(a[1])
a$model$coefficients
a$model$adjr2
a$model$r2
a$model$assign
a$model$contrasts
a$model$call
a$model$ter,s
a$model$terms
b <- a[1]
c <- a[2]
c
as.data.frame(c)
d <- lm(b, as.data.frame(c))
d <- lm(b$model$call, as.data.frame(c))
e <- as_data_frame(c)
e <- as.data.frame(c)
e
install.packages("Lahman")
library(Lahman)
Salaries
Salaries[yearID == 2012]
Salaries$yearID == 2012
Salaries[Salaries$yearID == 2012]
salaries <- Salaries
library(tidyr)
salaries %>% filter(yearID == 2012)
salaries %>% filter(yearID == "2012")
salaries$yearID
str(salaries)
salaries %>% filter(salaries$yearID == 2012)
salaries <- data.table(Salaries)
salaries <- datatable(Salaries)
salaries <- dataframe(Salaries)
salaries <- data.frame(Salaries)
salaries %>% filter(yearID == 2012)
library(tidyverse)
salaries %>% filter(yearID == 2012)
salaries %>% filter(yearID == 2022)
Positions
Appearances
apps <- data.frame(Appearances)
apps %>% filter(yearID == 2022)
View(apps)
apps <- data.frame(Appearances)%>% filter(yearID == 2022)
apps
View(apps)
write_csv(apps, "../Data/PositionAppearances2022.csv")
write_csv(apps, "..\Data\PositionAppearances2022.csv")
pwd
wd
pwd()
wd()
getwd()
jh
setwd("Users/hank/Documents/UChicago/Optimization/OptimizationProject/Code")
setwd("Users/hank/Documents/UChicago/Optimization")
setwd("/Users/hank/Documents/UChicago/Optimization/OptimizationProject/Code")
write_csv(apps, "../Data/PositionAppearances2022.csv")
